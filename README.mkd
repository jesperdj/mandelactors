# MandelActors

This is a simple [Mandelbrot fractal](http://en.wikipedia.org/wiki/Mandelbrot_set) generator that uses Scala actors. I wrote this to learn more about how actors work.

Note: On my test system (with a dual-core Intel Core 2 Duo, running 64-bit Windows 7 with 64-bit Java 6) the renderers that use actors are not faster than the renderer that uses a single thread. I don't know why this is so; the actors versions certainly use both cores of the CPU.

## Prerequisites

To compile and run MandelActors, you need:

- [JDK for Java 6](http://java.sun.com/javase/)
- [Scala 2.8](http://www.scala-lang.org/)
- [Apache Maven](http://maven.apache.org/)

After installing the JDK and Maven and adding their `bin` directories to your `PATH`, you can compile it with: `mvn compile`

If you have compiled MandelActors successfully, run it with `run.bat`.

Note: Especially when you use the renderers that use actors, and the number of samples is large (with a large image size and multiple samples per pixel), the program needs a lot of memory. You can set the maximum amount of memory to use by changing the value of the `-Xmx` parameter in the `JAVA_OPTS` environment variable in `run.bat`.

## Configuration

To configure MandelActors, edit the file `mandelactors.properties`. You can set the size of the output image, change settings for the sampler and reconstruction filter and parameters for the Mandelbrot algorithm. You can also select the renderer to use. Currently, there are four renderers:

### SingleThread

This renderer uses a single thread to do the rendering. This is useful to compare how fast the actor renderers perform compared to doing everything in a single thread.

### EventActors

This uses event-based actors: actors that use `react` to process messages. For each batch of samples, a new actor is created. This can potentially create a large number of actors, but event-based actors are very lightweight, so this is not a problem.

Configuration settings:

- `renderer.batchSize` The number of samples per batch (default: 1024).

### ThreadActors

This uses thread-based actors: actors that use `receive` to process messages. Thread-based actors block the thread they are running on while waiting to receive a message, so that each actor needs its own thread. Therefore, they are much more heavyweight than event-based actors and you can't create a large number of them.

The ThreadActors renderer creates a fixed number of actors and sends them batches of samples by round-robin scheduling. When the rendering is done, the actors are sent a stop message.

Configuration settings:

- `renderer.actorCount` The number of actors to create (default: twice the number of CPU cores available to the JVM).
- `renderer.batchSize` The number of samples per batch (default: 1024).

### Threads

This renderer does not use actors, but threads. It starts up a number of threads which pick up batches of samples from a work queue. The way this renderer works is a lot like the ThreadActors renderer.

Configuration settings:

- `renderer.threadCount` The number of threads to create (default: twice the number of CPU cores available to the JVM).
- `renderer.batchSize` The number of samples per batch (default: 1024).
